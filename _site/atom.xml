<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>CS9</title>
 <link href="http://bsk.education/CS9/atom.xml" rel="self"/>
 <link href="http://bsk.education/CS9/"/>
 <updated>2016-11-30T19:27:55-05:00</updated>
 <id>http://bsk.education/CS9</id>
 <author>
   <name>Ben Samuels-Kalow</name>
   <email>bsk@ms223.org</email>
 </author>

 
 <entry>
   <title>⚔ Choose your own adventure</title>
   <link href="http://bsk.education/CS9/python/2016/12/01/choose-your-own-adventure/"/>
   <updated>2016-12-01T19:11:00-05:00</updated>
   <id>http://bsk.education/CS9/python/2016/12/01/⚔-choose-your-own-adventure</id>
   <content type="html">&lt;h2 id=&quot;take-a-look-at-this&quot;&gt;Take a look at this:&lt;/h2&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;You&#39;ve enter the cave&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Do you take the passage on the left, in the middle, or the right?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Type left, right, or middle and hit &#39;Enter&#39;. &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;left&quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;l&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Poor choice. This path is dark and hopeless.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;right&quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;r&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;This path is less dark, but it smells worse...&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Things are looking up. Keep walking.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;What does it do? How does it work? Can you make your own adventure?&lt;/p&gt;

&lt;p&gt;To repl!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>🔀 Conditionals</title>
   <link href="http://bsk.education/CS9/python/2016/11/30/conditionals/"/>
   <updated>2016-11-30T19:49:00-05:00</updated>
   <id>http://bsk.education/CS9/python/2016/11/30/🔀-conditionals</id>
   <content type="html">&lt;h2 id=&quot;learning-targets&quot;&gt;Learning Targets&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;I can write conditionals in Python using &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;else&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;I can predict the output of conditionals in Python.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;do-now-in-classroom&quot;&gt;Do Now (in Classroom)&lt;/h2&gt;
&lt;p&gt;What data type is &lt;strong&gt;required&lt;/strong&gt; for a conditional?&lt;/p&gt;

&lt;p&gt;&lt;small&gt;Hint: The answer does &lt;strong&gt;not&lt;/strong&gt; depend on the programming language– it will be the same type of data in Python, SNAP, JavaScript, etc…&lt;/small&gt;&lt;/p&gt;

&lt;h2 id=&quot;conditionals&quot;&gt;Conditionals&lt;/h2&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#something true&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# run this indented code&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#run this indented code&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Quick check&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# What&#39;s the difference between&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;school&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;F&amp;amp;T&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#and&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;223&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;223&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# what about...&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;223&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;F&amp;amp;T&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;python-comparison-operators&quot;&gt;Python Comparison Operators&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Operator&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Description&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Example&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;==&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;equal to&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;x == 2&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;!&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;not equal to&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;y != 3&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&amp;gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;greater than&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;4 &amp;gt; 3&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&amp;lt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;less than&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;1 &amp;lt; 1&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&amp;gt;=&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;greater than or equal to&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;x &amp;gt;= 2&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&amp;lt;=&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;less than or equal to&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;y &amp;lt;= 3&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
What will print after each conditional is run?
&quot;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Number 1:&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;I am right&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;I am wrong&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# Number 2:&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;I am right&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;I am wrong&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;if-even&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; even…&lt;/h2&gt;
&lt;p&gt;How can we tell if a number is even or odd?&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;%&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;This is &lt;strong&gt;not&lt;/strong&gt; the percentage sign. I mean, it is, but in Python, it means &lt;strong&gt;modulo&lt;/strong&gt; or &lt;strong&gt;mod&lt;/strong&gt;. What?&lt;/p&gt;

&lt;p&gt;It divides one number by another and returns the remainder. Like this:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1040934&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1040934&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Before you start calculating, what are the &lt;strong&gt;only&lt;/strong&gt; possibilities of each &lt;strong&gt;modulo&lt;/strong&gt; operation?&lt;/p&gt;

&lt;h2 id=&quot;grouping&quot;&gt;Grouping&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Finish &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;String Methods&quot;&lt;/code&gt; (or submit in repl):&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Alyssa&lt;/li&gt;
  &lt;li&gt;Annalis&lt;/li&gt;
  &lt;li&gt;Anthony&lt;/li&gt;
  &lt;li&gt;Atiba&lt;/li&gt;
  &lt;li&gt;Brianna&lt;/li&gt;
  &lt;li&gt;Carlos&lt;/li&gt;
  &lt;li&gt;Dallana&lt;/li&gt;
  &lt;li&gt;David&lt;/li&gt;
  &lt;li&gt;Devonte&lt;/li&gt;
  &lt;li&gt;Emarie&lt;/li&gt;
  &lt;li&gt;Jeremiah&lt;/li&gt;
  &lt;li&gt;Jose&lt;/li&gt;
  &lt;li&gt;Kathryn&lt;/li&gt;
  &lt;li&gt;Matthew&lt;/li&gt;
  &lt;li&gt;Michael&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>❝String Methods❞</title>
   <link href="http://bsk.education/CS9/python/2016/11/23/string-methods/"/>
   <updated>2016-11-23T21:10:00-05:00</updated>
   <id>http://bsk.education/CS9/python/2016/11/23/string-methods</id>
   <content type="html">&lt;h2 id=&quot;learning-target&quot;&gt;🎯 Learning Target&lt;/h2&gt;
&lt;p&gt;I can write strings and utilize string methods in Python&lt;/p&gt;

&lt;h2 id=&quot;do-now-in-google-classroom&quot;&gt;Do Now (in Google Classroom)&lt;/h2&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# What prints if you run this code?&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2+1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2+1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2+1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;strings--things&quot;&gt;Strings &amp;amp; Things&lt;/h2&gt;
&lt;p&gt;Strings are any characters inside quotes.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;This is a string with double quotes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;This is a string with single quotes&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# doesn&#39;t matter which quotes you use as long as you are consistent.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Python can’t &lt;strong&gt;evaluate&lt;/strong&gt; anything inside of a string, so &lt;code class=&quot;highlighter-rouge&quot;&gt;print(&#39;1+2&#39;)&lt;/code&gt; becomes: &lt;code class=&quot;highlighter-rouge&quot;&gt;&#39;1+2&#39;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What is the proper way to print the statement below:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;It’s a Wonderful Life!&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;“&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;It&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;’&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Wonderful&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Life&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!’&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;‘&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;It&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;’&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Wonderful&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Life&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!’&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;It&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;’&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Wonderful&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Life&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;“&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;It&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;’&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Wonderful&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Life&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!”&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;!--hiiiiii  --&gt;
&lt;p&gt;## String Methods
Built-in actions you can use on string data.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sk&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;WHY ARE YOU YELLING!&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;to kill a mockingbird&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.upper()&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;.title()&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;.lower()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We can also add strings together. In Python, this is called &lt;strong&gt;concatenation&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;first_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;grace&#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;last_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;hopper&#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# What&#39;s the mistake?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;practice&quot;&gt;Practice!&lt;/h2&gt;
&lt;p&gt;👉 Go to &lt;a href=&quot;http://repl.it/&quot;&gt;repl&lt;/a&gt;!&lt;/p&gt;

&lt;h3 id=&quot;organization&quot;&gt;Organization&lt;/h3&gt;

&lt;p&gt;Separate each exercise with a line space and add a comment above each to tell me what you are doing.&lt;/p&gt;

&lt;h3 id=&quot;grading-policy&quot;&gt;Grading Policy&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;2 ⭐, 1 ⭐⭐ = 80&lt;/li&gt;
  &lt;li&gt;2 ⭐, 2 ⭐⭐ = 85&lt;/li&gt;
  &lt;li&gt;2 ⭐, 2 ⭐⭐, 1 ⭐⭐⭐ = 90&lt;/li&gt;
  &lt;li&gt;2 ⭐, 2 ⭐⭐, 2 ⭐⭐ = 100&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section&quot;&gt;⭐&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Option 1:&lt;/strong&gt; Store a person’s name in a variable. Print the name in uppercase, lowercase and title case.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Option 2:&lt;/strong&gt; Find a quote from a famous person that you admire. Print the quote and the name of it’s author.&lt;/p&gt;

&lt;h4 id=&quot;section-1&quot;&gt;⭐⭐&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Option 1:&lt;/strong&gt; Find a quote from a famous person that you admire and store it in a variable called message. Store the name of the author in a variable called famous_person. Print the quote and the name of it’s author using concatenation. It should look like:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Steve Jobs: &quot;_____________quote_here_____________&quot;. &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Option 2:&lt;/strong&gt; In order to use a tab in your display you need to add \t in front of what you want printed.&lt;/p&gt;

&lt;p&gt;For example:
This code –&amp;gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;This creates a tab.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;       
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;will end up looking like –&amp;gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;    This creates a tab.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Find another quote and print the quote and the author but tab the author’s name on a new line after the quote.&lt;/p&gt;

&lt;h4 id=&quot;section-2&quot;&gt;⭐⭐⭐&lt;/h4&gt;
&lt;p&gt;This line of code:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Languages:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Python&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;JavaScript&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Creates this –&amp;gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Languages:
Python
C
JavaScript
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Option 1:&lt;/strong&gt; Utilize &lt;code class=&quot;highlighter-rouge&quot;&gt;\n&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;\t&lt;/code&gt;  to create a shopping list with just one print statement.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Option 2:&lt;/strong&gt; Utilize &lt;code class=&quot;highlighter-rouge&quot;&gt;\n&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;\t&lt;/code&gt;  to recreate the statement in the picture below using just one print statement. Each word must be printed on the same line and in approximately the same position as it appears in the picture.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>🎉 Hello again, World!</title>
   <link href="http://bsk.education/CS9/python/2016/11/21/hello-world/"/>
   <updated>2016-11-21T10:01:00-05:00</updated>
   <id>http://bsk.education/CS9/python/2016/11/21/hello-world</id>
   <content type="html">&lt;h2 id=&quot;learning-target&quot;&gt;🎯 Learning Target&lt;/h2&gt;

&lt;p&gt;I can create variables in Python.&lt;/p&gt;

&lt;h2 id=&quot;do-now&quot;&gt;👉 Do Now&lt;/h2&gt;
&lt;p&gt;Fill in as much of this Venn Diagram as you can:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://bsk.education/CS9/images/SnapPython.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;return-to-python&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt; to Python&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Remember this?&lt;/em&gt;&lt;/p&gt;

&lt;script src=&quot;//repl.it/embed/E3hW/3.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Why does it say &lt;code class=&quot;highlighter-rouge&quot;&gt;Let&#39;s review Python&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Last year, we used Python &lt;strong&gt;2&lt;/strong&gt;. This year, we will be using Python &lt;strong&gt;3&lt;/strong&gt;. There are a few important differences, but for today, the most important is this:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# in PYthon 3, print is a FUNCTION:&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello there&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   ^ parentheses ^&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;variables&quot;&gt;Variables&lt;/h2&gt;
&lt;p&gt;Store a variable under a name.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Name&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;ONE Equal sign&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Value&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;name&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;=&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;SK&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;grade&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;=&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;9&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;rules-for-variable-name&quot;&gt;Rules for Variable Name&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Contains letters, numbers,  and underscores ( _ )&lt;/li&gt;
  &lt;li&gt;Cannot start with number&lt;/li&gt;
  &lt;li&gt;Cannot contain spaces  (you can use underscores used to separate words)&lt;/li&gt;
  &lt;li&gt;Cannot use &lt;strong&gt;keywords&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;words&quot;&gt;🔑words&lt;/h3&gt;
&lt;p&gt;Each programming language has a set of words that are &lt;em&gt;reserved&lt;/em&gt; by the language for programmatic purposes.&lt;/p&gt;

&lt;p&gt;Some Keywords in Python are :  &lt;code class=&quot;highlighter-rouge&quot;&gt;print&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;else&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;rules-of--for-variable-names&quot;&gt;Rules of 👍 for Variable Names&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Pick names that make sense. Someone &lt;em&gt;besides you&lt;/em&gt; should be able to figure out what your variables mean.&lt;/li&gt;
  &lt;li&gt;Use underscores to separate words&lt;/li&gt;
  &lt;li&gt;Python is &lt;strong&gt;CASE SENSITIVE&lt;/strong&gt; which means &lt;code class=&quot;highlighter-rouge&quot;&gt;Num_marbles = 10&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;num_marbles = 10&lt;/code&gt; are different.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;datatypes&quot;&gt;Datatypes&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Type&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
      &lt;th&gt;Example&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;Any characters inside &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;&quot;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;This is a string.&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Integer&lt;/td&gt;
      &lt;td&gt;Whole numbers&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;3&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;42&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;-1002&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Float&lt;/td&gt;
      &lt;td&gt;Numbers with decimals.&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;3.42&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;-10.02&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Boolean&lt;/td&gt;
      &lt;td&gt;Only two values&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;3&amp;gt;42&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;3.42&amp;gt;-10.02&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;python-review&quot;&gt;⏪ Python Review&lt;/h2&gt;

&lt;p&gt;👉 &lt;a href=&quot;https://repl.it/classroom/invite/B6s697b&quot;&gt;Join our repl classroom&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create a variable called &lt;code class=&quot;highlighter-rouge&quot;&gt;my_name&lt;/code&gt;  and store your name in it. Then print the variable.&lt;/li&gt;
  &lt;li&gt;Create a variable called &lt;code class=&quot;highlighter-rouge&quot;&gt;multiply&lt;/code&gt; that is the product of a negative number and a positive number with a decimal (not a whole number). Print the variable.&lt;/li&gt;
  &lt;li&gt;Store a message in a variable. Then print the message.&lt;/li&gt;
  &lt;li&gt;Create a variable that stores a Boolean value. Print the variable.&lt;/li&gt;
  &lt;li&gt;Create a variable that stores a message. Then store another message in the same variable. Print the message.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section&quot;&gt;🌶&lt;/h3&gt;
&lt;p&gt;Create a variable that is the quotient of two other variables (hint: you will need to store values in that variable first).&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;🌶🌶🌶&lt;/h3&gt;

&lt;p&gt;The operations between boolean values are AND and OR. Create a variable that store the value of True or False and then prints it. Create another value that stores the value of True and False. Print the variable.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>🐲 The Villain</title>
   <link href="http://bsk.education/CS9/snap/2016/11/07/the-villain/"/>
   <updated>2016-11-07T07:32:00-05:00</updated>
   <id>http://bsk.education/CS9/snap/2016/11/07/the-villain</id>
   <content type="html">&lt;h2 id=&quot;do-now-in-classroom&quot;&gt;Do Now (In Classroom)&lt;/h2&gt;
&lt;p&gt;What makes a good villain?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/8/88/Villianc_transparent_background.svg/2000px-Villianc_transparent_background.svg.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;by-the-end-of-today&quot;&gt;By the end of today…&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;In your planning doc:&lt;/em&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Specification&lt;/th&gt;
      &lt;th&gt;Scripts&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;There is at least one on-ground enemy&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;The enemy sprite moves towards “Hero”&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;The enemy sprite reappears/rolls-over when it hits the edge of the stage&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;The enemy sprite is animated when it is moving towards “Hero”&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;If “Hero” does not jump, she runs into the enemy and the game ends with an appropriate message&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;It should be possible for “Hero” to jump over the enemy&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</content>
 </entry>
 
 <entry>
   <title>🗻 The Scenery</title>
   <link href="http://bsk.education/CS9/snap/2016/11/03/the-scenery/"/>
   <updated>2016-11-03T18:34:00-04:00</updated>
   <id>http://bsk.education/CS9/snap/2016/11/03/the-scenery</id>
   <content type="html">&lt;h2 id=&quot;learning-target&quot;&gt;Learning Target&lt;/h2&gt;
&lt;p&gt;I can use conditionals and variables to relate the movement of my “hero” and scenery sprites.&lt;/p&gt;

&lt;h2 id=&quot;good-programming-habits-in-your-code&quot;&gt;Good programming habits in your code:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Using Start and Stop blocks.&lt;/li&gt;
  &lt;li&gt;Making sure you initialize appropriately so that your program is repeatable.&lt;/li&gt;
  &lt;li&gt;Use conditionals and variables, &lt;strong&gt;not&lt;/strong&gt; precisely timed waits.&lt;/li&gt;
  &lt;li&gt;Add comments to your code so it is easy to understand.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://snap.berkeley.edu/snapsource/snap.html#present:Username=223bsk&amp;amp;ProjectName=Mario&quot;&gt;Example&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;by-the-end-of-today&quot;&gt;By the end of today…&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;In your planning doc:&lt;/em&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Specification&lt;/th&gt;
      &lt;th&gt;Scripts&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;There should be at least two scenery sprites&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;You should layer these sprites relative to “Hero” and each other.&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Scenery sprites move relative to “Hero” as she moves.&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Following with the layers, scenery sprites should move at different speeds so that one seems farther away.&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Scenery sprites should roll over/reappear when they hit the edge of the stage.&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</content>
 </entry>
 
 <entry>
   <title>⚔ The Hero's Journey</title>
   <link href="http://bsk.education/CS9/snap/2016/10/31/the-heros-journey/"/>
   <updated>2016-10-31T10:42:35-04:00</updated>
   <id>http://bsk.education/CS9/snap/2016/10/31/the-heros-journey</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;http://2.bp.blogspot.com/-iL7OZWhw_pU/USdg2ptq2HI/AAAAAAAAAgY/Bq8Ycb8MT0w/s1600/HerosJourneybyTheNovelFactory1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;meeting-standards&quot;&gt;Meeting Standards&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;“Hero” should clearly “face” the right when you push the &lt;code class=&quot;highlighter-rouge&quot;&gt;→&lt;/code&gt; right arrow key&lt;/li&gt;
  &lt;li&gt;“Hero” should clearly “face” the left when you push the &lt;code class=&quot;highlighter-rouge&quot;&gt;←&lt;/code&gt; left arrow key&lt;/li&gt;
  &lt;li&gt;“Hero” should perform an animated walk when you hold &lt;code class=&quot;highlighter-rouge&quot;&gt;←←&lt;/code&gt;left or &lt;code class=&quot;highlighter-rouge&quot;&gt;→→&lt;/code&gt;right arrow key&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://snap.berkeley.edu/snapsource/snap.html#present:Username=ikamagate&amp;amp;ProjectName=game&quot;&gt;Example&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;exceeding-standards&quot;&gt;Exceeding Standards&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;“Hero” should jump (with gravity) when you push space bar&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;assessment&quot;&gt;Assessment&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Good programming habits in your code&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Using Start and Stop blocks.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Making sure you initialize appropriately so that your program is repeatable.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Use conditionals and variables, not precisely timed waits.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Add comments to your code so it is easy to understand.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</content>
 </entry>
 
 <entry>
   <title>👌 SNAP Final Project</title>
   <link href="http://bsk.education/CS9/snap/2016/10/24/snap-final-project/"/>
   <updated>2016-10-24T09:12:00-04:00</updated>
   <id>http://bsk.education/CS9/snap/2016/10/24/👌-snap-final-project</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;http://bsk.education/CS9/images/Avatar.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;overview&quot;&gt;🤖 Overview&lt;/h2&gt;
&lt;p&gt;Platform games are among the most widely recognized types of video games. Composing about one third of all console games at the peak of their popularity, platform games are characterized by their relative simplicity and by the common gameplay element of jumping across suspended platforms (hence the name) to avoid falling into a hazard. Platform games also typically include enemy characters, items that grant the hero special abilities (“power-ups”), and a “checkpoint” system that allows the player to restart from partway through a game or level when he or she dies.&lt;/p&gt;

&lt;h2 id=&quot;details&quot;&gt;Details&lt;/h2&gt;
&lt;p&gt;1⃣ &lt;strong&gt;Hero&lt;/strong&gt; Your program should have a “Hero” sprite. You will be designing this character (a simple stick figure will suffice, if your art skills are like mine). “Hero” should respond to user input. Specifically:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;“Hero” should clearly “face” the right when you push the right arrow key&lt;/li&gt;
  &lt;li&gt;“Hero” should clearly “face” the left when you push the left arrow key&lt;/li&gt;
  &lt;li&gt;“Hero” should jump when you push space bar&lt;/li&gt;
  &lt;li&gt;“Hero” should perform an animated walk when you hold left or right arrow key&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2⃣ &lt;strong&gt;Scenery&lt;/strong&gt; You should have scenery sprites that move based upon “Hero” traveling on the level. It is up to you to decide the level scenery, but you should meet the following requirements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;There should be at least two scenery sprites (Example: A mountain and a tree)
You should layer these sprites relative to “Hero” and each other. For example, “Hero” should always be “in front” of any background scenery sprites&lt;/li&gt;
  &lt;li&gt;Scenery sprites move relative to “Hero” as she moves. For example, when you hold down the right arrow key, the background sprites should move from right to left in the stage.&lt;/li&gt;
  &lt;li&gt;Following with the layers, scenery sprites should move at different speeds so that one seems farther away. For example, a faraway mountain should move more slowly than a nearby tree.&lt;/li&gt;
  &lt;li&gt;Scenery sprites should roll over/reappear when they hit the edge of the stage. For example, when “Hero” is walking to the right, the scenery Sprites should re-appear on the right side of the stage when they roll off the left.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;3⃣ &lt;strong&gt;Enemy&lt;/strong&gt; There should be an on-ground enemy for “Hero” to contend with. Specific criteria here include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;There is at least one on-ground enemy&lt;/li&gt;
  &lt;li&gt;The enemy sprite moves towards “Hero”, independent of whether “Hero” is moving (e.g. regardless of whether the user is pressing an arrow key).&lt;/li&gt;
  &lt;li&gt;The enemy sprite reappears/rolls-over when it hits the edge of the stage&lt;/li&gt;
  &lt;li&gt;The enemy sprite is animated when it is moving towards “Hero”&lt;/li&gt;
  &lt;li&gt;If “Hero” does not jump, she runs into the enemy and the game ends with an appropriate message (HINT: you can use the “STOP ALL” block to end all scripts)&lt;/li&gt;
  &lt;li&gt;It should be possible for “Hero” to jump over the enemy.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;programming&quot;&gt;Programming&lt;/h2&gt;
&lt;p&gt;I am looking for you to incorporate good programming habits in your code:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Using Start and Stop blocks.&lt;/li&gt;
  &lt;li&gt;Making sure you initialize appropriately so that your program is repeatable.&lt;/li&gt;
  &lt;li&gt;Use conditionals and variables, not precisely timed waits.&lt;/li&gt;
  &lt;li&gt;Add comments to your code so it is easy to understand.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;extensions-for-the-4&quot;&gt;Extensions (for the 4⃣!)&lt;/h2&gt;
&lt;p&gt;Once you complete the above, you can extend your program. Some suggestions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Include flying enemies for “Hero” to dodge or duck&lt;/li&gt;
  &lt;li&gt;Keep score based on how many objects “Hero” gets by [Hint: Use a variable and show it on the screen]&lt;/li&gt;
  &lt;li&gt;Have “Hero” jump to ‘grab’ an object that offers “Hero” extra points or more powerful abilities (such as jumping higher or not being killed when she runs into an enemy). The objects must appear at random times and move smoothly as “Hero” runs&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;rubric&quot;&gt;Rubric&lt;/h2&gt;
&lt;p&gt;The detailed list for what I will use to grade your projects is below. Please review your projects before submitting to be sure you meet all of them.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Requirement&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Value&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;“Hero” turns to the right on right arrow key&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;“Hero” turns to the left on left arrow key&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;“Hero” performs an in-place animated walk if you hold down either arrow key&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;“Hero” jumps based on some input&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;There are least two scenery sprites&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Scenery sprites are layered with “Hero” (e.g. appropriate layering blocks are in your program)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Scenery sprites move based on “Hero” movement&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Scenery sprites move at different speeds (e.g. far away versus near)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Scenery sprites roll over when the fall of the stage&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;There is at least one on-ground enemy&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Enemy sprite always moves towards “Hero”&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Enemy sprite re-appears/rolls over correctly&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Enemy sprite is animated when it moves&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;If “Hero” does not jump, she runs into the enemy and the game ends nicely and properly&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;10&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;“Hero” can jump over the enemy&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Good programming #1: Program has clear start and stop&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Good programming #2: Program is repeatable and initializes state correctly&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Good programming #3: Use of comments in your code&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Good programming #4: Use conditionals and variables, not precisely timed waits.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Extra Credit: Include flying enemies for “Hero” to dodge or duck&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Extra Credit: Keep score based on how many objects “Hero” gets by&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Extra Credit: Have “Hero” jump to ‘grab’ an object that offers “Hero” extra points or more powerful abilities. The objects must appear at random  times and move smoothly as “Hero” runs&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;10&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Extra Credit: Create Your Own Extension&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0-10&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;TOTAL POINTS&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;100&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</content>
 </entry>
 
 <entry>
   <title>Lab 4⃣.0⃣ Lists</title>
   <link href="http://bsk.education/CS9/snap/2016/10/21/lab-4-0-lists/"/>
   <updated>2016-10-21T20:41:00-04:00</updated>
   <id>http://bsk.education/CS9/snap/2016/10/21/lab-4⃣-0⃣-lists</id>
   <content type="html">&lt;p&gt;Create a variable for each part of speech below, and set each variable to hold a list of words that fit that part of speech. Some examples are given, but feel free to use your own.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Part of Speech&lt;/th&gt;
      &lt;th&gt;Definition&lt;/th&gt;
      &lt;th&gt;Example Words&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;noun&lt;/td&gt;
      &lt;td&gt;&lt;small&gt;person, place, or thing&lt;/small&gt;&lt;/td&gt;
      &lt;td&gt;giraffe, monkey, boy, girl, elephant, … people’s names…&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;verb&lt;/td&gt;
      &lt;td&gt;&lt;small&gt;action word&lt;/small&gt;&lt;/td&gt;
      &lt;td&gt;jumps, runs, sleeps, sits, dances, …&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;adjective&lt;/td&gt;
      &lt;td&gt;&lt;small&gt;describes a noun&lt;/small&gt;&lt;/td&gt;
      &lt;td&gt;big, small, loud, silly, young, old, sleepy, …&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;adverb&lt;/td&gt;
      &lt;td&gt;&lt;small&gt;describes a verb or an adjective&lt;/small&gt;&lt;/td&gt;
      &lt;td&gt;quickly, excitedly, angrily, happily, sadly, …&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;article&lt;/td&gt;
      &lt;td&gt;&lt;small&gt;introduces noun: &lt;em&gt;the&lt;/em&gt; book, &lt;em&gt;a&lt;/em&gt; giraffe&lt;/small&gt;&lt;/td&gt;
      &lt;td&gt;a, the&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;preposition&lt;/td&gt;
      &lt;td&gt;&lt;small&gt;relates a noun to something else&lt;/small&gt;&lt;/td&gt;
      &lt;td&gt;under, over, around, near, beside, …&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Write a custom reporter block called “noun
phrase” that reports a noun phrase where each word is chosen randomly from the lists you created. A noun phrase consists of an article, an adjective, and a noun in that order.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://bsk.education/CS9/images/SNAPnoun_phrase.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Write custom reporter blocks like &lt;code class=&quot;highlighter-rouge&quot;&gt;noun phrase&lt;/code&gt; for each of the phrase types listed below.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Block name&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Construction&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;prepositional phrase&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;preposition, noun phrase&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;verb phrase&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;adverb, verb, preposition phrase&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;sentence phrase&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;noun phrase, verb phrase&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Write code so that when you press the spacebar, a random sentence is generated and a sprite says a sentence.&lt;/p&gt;

&lt;h2 id=&quot;changing-our-vocabulary&quot;&gt;Changing Our Vocabulary&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Write a script so that when the ‘n’ key is pressed, the user is prompted for a new noun and that noun is added to list of nouns. After that point, the new noun entered by the user should be able to appear in sentences.&lt;/li&gt;
  &lt;li&gt;Write scripts to add words to the other lists. Use the keys listed below.&lt;/li&gt;
&lt;/ol&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Key&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Part of speech&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;v&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;verb&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;j&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;adjective&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;d&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;adverb&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;a&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;article&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;p&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;preposition&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</content>
 </entry>
 
 <entry>
   <title>🔢 Lists!</title>
   <link href="http://bsk.education/CS9/snap/2016/10/20/lists/"/>
   <updated>2016-10-20T09:30:00-04:00</updated>
   <id>http://bsk.education/CS9/snap/2016/10/20/🔢-lists</id>
   <content type="html">&lt;h2 id=&quot;learning-targets&quot;&gt;Learning Targets&lt;/h2&gt;
&lt;p&gt;I can create, modify, and access lists in SNAP.&lt;/p&gt;

&lt;h2 id=&quot;do-now-on-paper&quot;&gt;Do Now (on paper)&lt;/h2&gt;
&lt;p&gt;Write an algorithm to reverse the order of any sentence.  &lt;br /&gt;
&lt;em&gt;For example, your algorithm would make the Do Now turn into:&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Sentence a of order the reverse to algorithm an write.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;pseudocode&quot;&gt;Pseudocode&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sentence = word_1 + word_2 + word_3 + … + word_n&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ecnetnes = word_n + … + word_3 + word _ 2 + word_1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We need &lt;strong&gt;variables&lt;/strong&gt; But we don’t know &lt;strong&gt;how many&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;variables-vs-lists&quot;&gt;Variables vs. Lists&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Variables&lt;/strong&gt; store a single value in a single location.
&lt;img src=&quot;http://bsk.education/CS9/images/SNAPvariable.png&quot; alt=&quot;&quot; /&gt;
&lt;strong&gt;Lists&lt;/strong&gt; store multiple values in a single location.
&lt;img src=&quot;http://bsk.education/CS9/images/SNAPlists.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;list-traversal&quot;&gt;List Traversal&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Looking at each element of a list in order and performing some operation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ex. Say each person’s name, count the number of May birthdays, find the average GPA…&lt;/p&gt;

&lt;p&gt;When working with lists, we need to create an &lt;code class=&quot;highlighter-rouge&quot;&gt;index&lt;/code&gt; variable to keep track of position.&lt;/p&gt;

&lt;p&gt;SNAP (and Python!) have built in &lt;code class=&quot;highlighter-rouge&quot;&gt;split&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;join&lt;/code&gt; functions to &lt;strong&gt;separate&lt;/strong&gt; lists into individual pieces of data, and to &lt;strong&gt;combine&lt;/strong&gt; individual pieces of data into a list.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Let’s get some practice:&lt;/p&gt;

&lt;p&gt;Create a new SNAP project called “Lists.” In that project, you will create&lt;/p&gt;

&lt;h2 id=&quot;highway-writing&quot;&gt;🛣 Highway Writing&lt;/h2&gt;
&lt;p&gt;Build a block to reverse the order of a sentence by word.&lt;/p&gt;

&lt;h2 id=&quot;sdrawkcab&quot;&gt;🔄 Sdrawkcab&lt;/h2&gt;
&lt;p&gt;Build a block that reverses the order of a sentence by splitting it into a list.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Lab 3⃣.0⃣ Guessing Game</title>
   <link href="http://bsk.education/CS9/snap/2016/10/13/lab-3-0-guessing-game/"/>
   <updated>2016-10-13T22:18:00-04:00</updated>
   <id>http://bsk.education/CS9/snap/2016/10/13/lab-3⃣-0⃣-guessing-game</id>
   <content type="html">&lt;p&gt;In this lab, you will use conditional statements and variables to build a simple number guessing game.&lt;/p&gt;

&lt;h2 id=&quot;section-1---im-thinking-of-a-number&quot;&gt;Section 1 - I’m Thinking of a Number…&lt;/h2&gt;
&lt;p&gt;You will write a SNAP program to choose a random number between 1 and 10 and then ask the user to guess a number.&lt;/p&gt;

&lt;p&gt;If the user’s guess matches the random number, the user wins. If not, the user loses. In either case, the user should be shown a message indicating whether she won or lost and the secret random number should be revealed.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Write the simple version of the guessing game program described above.&lt;/li&gt;
  &lt;li&gt;Modify the program to keep asking the user for guesses until the correct number is given. Be sure to give a message after each guess, but only reveal the secret number when the user has guessed correctly and the game is over.&lt;/li&gt;
  &lt;li&gt;Add code to ask the player their name at the start of the game. Then, personalize the message for an incorrect guess by adding the player’s name. For example, if Scout is playing the game, then the message should say “Sorry, Scout, that guess is not correct” instead of just “Sorry” when Scout guesses incorrectly.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-2---game-upgrades&quot;&gt;Section 2 - Game Upgrades&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Modify your guessing game so that the player can decide the range of possible numbers from which the secret number can be chosen. After asking the player’s name, ask what she wants the highest possible number to be. Then, instead of choosing a random number between 1 and 10, choose a random number between 1 and the number the player requested.&lt;/li&gt;
  &lt;li&gt;Add code to keep track of how many guesses the player has made. After the player guesses correctly, inform her how many tries it took before the correct number was guessed.&lt;/li&gt;
  &lt;li&gt;Increase the player’s chances by telling her whether the guessed number is too high or too low instead of just that it is incorrect.&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>❓Unit 3: Variables</title>
   <link href="http://bsk.education/CS9/snap/2016/10/13/variables-guessing-game/"/>
   <updated>2016-10-13T22:04:00-04:00</updated>
   <id>http://bsk.education/CS9/snap/2016/10/13/❓variables-guessing-game</id>
   <content type="html">&lt;h2 id=&quot;learning-target&quot;&gt;Learning Target&lt;/h2&gt;
&lt;p&gt;I can create variables in SNAP.&lt;/p&gt;

&lt;h2 id=&quot;do-now-in-google-classroom&quot;&gt;Do Now (In Google Classroom)&lt;/h2&gt;
&lt;p&gt;What is a variable?   &lt;br /&gt;
Why are they useful in programming?&lt;/p&gt;

&lt;h2 id=&quot;variable&quot;&gt;Variable&lt;/h2&gt;
&lt;p&gt;A “place” to store information.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://bsk.education/CS9/images/SNAPaskAnswer.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://bsk.education/CS9/images/SNAPaskaskanswer.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://bsk.education/CS9/images/SNAPterriblebetter.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>🏓 Pong!</title>
   <link href="http://bsk.education/CS9/snap/2016/10/05/pong/"/>
   <updated>2016-10-05T22:54:00-04:00</updated>
   <id>http://bsk.education/CS9/snap/2016/10/05/🏓-pong</id>
   <content type="html">&lt;h2 id=&quot;specifications-&quot;&gt;★ Specifications ★&lt;/h2&gt;

&lt;h3 id=&quot;gameplay&quot;&gt;Gameplay&lt;/h3&gt;

&lt;p&gt;The ball bounces off the upper and lower edges of the field and the players’ paddles. Each time the ball bounces off a paddle, its speed increases by a small amount. When the ball bounces off a paddle, its direction is reversed with a small random variation to add unpredictability to the game. It’s like ping pong, but for nerds. It’s like ping pong.&lt;/p&gt;

&lt;h3 id=&quot;scoring&quot;&gt;Scoring&lt;/h3&gt;
&lt;p&gt;⭐ If the ball touches the left or right edge of the field, a point is scored for the opposite player.    &lt;br /&gt;
⭐ When one player reaches 5 points, the game is over and that player is the winner. The winner is announced on the screen and the player is given the opportunity to start a new game.&lt;/p&gt;

&lt;h3 id=&quot;player-control&quot;&gt;Player Control&lt;/h3&gt;
&lt;p&gt;⭐ Paddles are positioned a short distance away from the side they are defending, and can only move up and down, not side to side.    &lt;br /&gt;
⭐ The player can control the paddle with your choice of keys or the mouse.   &lt;br /&gt;
⭐ The other paddle should be controlled by THE COMPUTER&lt;/p&gt;

&lt;h2 id=&quot;checklist&quot;&gt;☑️ Checklist&lt;/h2&gt;

&lt;h3 id=&quot;custom-blocks&quot;&gt;Custom Blocks&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Throughout your program, you should use custom blocks to generalize common operation, like keeping score.&lt;/li&gt;
  &lt;li&gt;Your program must include at least three custom blocks, at least one of which must take inputs.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;required-checkpoints&quot;&gt;Required Checkpoints&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Players control their paddle.&lt;/li&gt;
  &lt;li&gt;The ball starts in the middle (INITIALIZE), moves in a random direction, and bounce.&lt;/li&gt;
  &lt;li&gt;The ball speeds up when it hits a paddle, and resets to the middle when it hits the left or right edge&lt;/li&gt;
  &lt;li&gt;A point is scored when the ball hits the edge on the opponent’s side of the field; the game ends when one player reaches five points; players can start a new game after the game ends&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>🔨 Custom Blocks</title>
   <link href="http://bsk.education/CS9/snap/2016/10/05/Custom-Blocks/"/>
   <updated>2016-10-05T22:22:00-04:00</updated>
   <id>http://bsk.education/CS9/snap/2016/10/05/🔨-Custom-Blocks</id>
   <content type="html">&lt;h2 id=&quot;learning-target&quot;&gt;🎯 Learning Target&lt;/h2&gt;

&lt;p&gt;I can create my own blocks to create custom functions in SNAP.&lt;/p&gt;

&lt;h2 id=&quot;do-now-in-google-classroom&quot;&gt;Do Now (in Google Classroom)&lt;/h2&gt;

&lt;p&gt;Find this block… if you can…
&lt;img src=&quot;http://bsk.education/CS9/images/SNAPscorefor.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;custom-blocks&quot;&gt;Custom Blocks&lt;/h2&gt;

&lt;p&gt;How do you think this works?
&lt;img src=&quot;http://bsk.education/CS9/images/SNAPscoreforDefinition.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;block-explore&quot;&gt;🔄 Block explore&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://bsk.education/CS9/images/SNAPstartBall.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://bsk.education/CS9/images/SNAPbounce.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://bsk.education/CS9/images/SNAPpickRandomDirection.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>🍂 Lab 2⃣.3⃣ Defining Gravity</title>
   <link href="http://bsk.education/CS9/snap/2016/09/29/lab-2-3-defining-gravity/"/>
   <updated>2016-09-29T07:20:00-04:00</updated>
   <id>http://bsk.education/CS9/snap/2016/09/29/🍂-lab-2-3-defining-gravity</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;In this lab, you will use everything you’ve learned about loops and conditionals to construct a simplified model for gravity.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-goes-up&quot;&gt;What goes up…🐶&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Create a SNAP program with a background that looks like an outside scene. Add a single sprite that looks like an object of your choice (a brick or a ball would work well) and place it so it is touching the “ground.”&lt;/li&gt;
  &lt;li&gt;Write code for your sprite so that, when the green flag is clicked, the object moves to the top of the stage and “falls” towards the bottom at a constant speed.&lt;/li&gt;
  &lt;li&gt;What happens in your program when the object hits the “ground”? Is that an accurate model of how gravity works on Earth?&lt;/li&gt;
  &lt;li&gt;Modify your program so that the problem you identified in part 3 is fixed. Make your object do something appropriate when it hits the “ground.” (Making sure the ground is a unique color and making use of that color will be helpful.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;✅ &lt;strong&gt;Check: Press Green Flag, object falls from top of the screen, hits the ground, and looks like it’s hitting the ground.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;must-come-down&quot;&gt;…Must Come Down&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Add a second sprite that looks like something that might already be on the ground when your first object is falling (like a house, a picnic table, a person, etc.). Put this new object directly below where the first object falls so that the falling object will hit it.&lt;/li&gt;
  &lt;li&gt;What should happen when the following object hits the object on the ground? Will that happen with the model we currently have? Why or why not?&lt;/li&gt;
  &lt;li&gt;Modify your code so that you fix the problem you identified in part 2.2. Make your falling object do something appropriate if it hits the object on the ground. Once you’ve made that work, move the falling object and make sure you didn’t break the situation when the falling object doesn’t hit something on the way down.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;✅ &lt;strong&gt;Check: Code for a collision between two objects, and a miss.&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Add code so that both objects move to a random x coordinate every time the green flag is clicked. The falling object should be at the top of the stage, and the other object at the bottom. Verify that the falling object does the right thing no matter where the two objects end up relative to each other.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add a hill to your outdoor scene and make sure that your falling object does something appropriate when it hits the hill.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;✅ &lt;strong&gt;Check: Green Flag sets random position. Object falls, collides or “rolls.”&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>➿ Nested Loops</title>
   <link href="http://bsk.education/CS9/snap/2016/09/28/nested-loops/"/>
   <updated>2016-09-28T21:32:00-04:00</updated>
   <id>http://bsk.education/CS9/snap/2016/09/28/➿-nested-loops</id>
   <content type="html">&lt;h2 id=&quot;learning-target&quot;&gt;🎯 Learning Target&lt;/h2&gt;
&lt;p&gt;I can use nested loops to solve programming problems.&lt;/p&gt;

&lt;h2 id=&quot;do-now-in-google-classroom&quot;&gt;Do Now (in Google Classroom)&lt;/h2&gt;
&lt;p&gt;Why are loops useful?&lt;/p&gt;

&lt;p&gt;Let’s look an example. Write code to draw two squares, next to each other.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://snap.berkeley.edu/snapsource/snap.html#present:Username=223bsk&amp;amp;ProjectName=nestedLoops&quot;&gt;⬛⬛&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;nested-loops&quot;&gt;Nested Loops&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;A loop in a loop.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;In other words…&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://bsk.education/CS9/images/NestedLoops.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;How many times will the sprite take 20 steps?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://bsk.education/CS9/images/NestedLoopsRepeat.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;lab-22---its-brick&quot;&gt;Lab 2.2 - It’s Brick&lt;/h2&gt;

&lt;p&gt;In this lab, you will use nested loops to draw a large brick wall using as little code as possible.&lt;/p&gt;

&lt;h2 id=&quot;part-1---build-a-brick&quot;&gt;Part 1 - Build a Brick&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Write a SNAP script to draw a single 20x10 “brick” in the lower left corner of the stage when the green flag is clicked.&lt;/li&gt;
  &lt;li&gt;Modify your code to draw two bricks side by side. The bricks should share a short edge.&lt;/li&gt;
  &lt;li&gt;Now modify your code again to build a full row of bricks across the entire length of the stage. Use loop to keep your code as concise as possible. Remember that the stage is 480 pixels wide and 360 pixels tall (by default- you can change that).&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;part-2---build-a-wall&quot;&gt;Part 2 - Build a Wall&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Now that you can build a row of bricks, add code to build a second row above the first row. The bricks in the second row should share a long edge with those in the first row, but should be “offset” so that the ends of the second row bricks are at the middle of the first row bricks.&lt;/li&gt;
  &lt;li&gt;Modify your code to build more rows, alternating back and forth between the “regular” and “offset” rows. Use nested loops to keep your code concise.&lt;/li&gt;
  &lt;li&gt;Finish off the wall the by building alternating rows all the way to the top of the stage. Remember that the stage is 360 pixels tall. Your final wall should look like this:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;http://bsk.education/CS9/images/Bricks.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Can you build the whole wall with one nested loop?&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>🔁 Unit 2: Loops</title>
   <link href="http://bsk.education/CS9/snap/2016/09/25/unit-2-loops/"/>
   <updated>2016-09-25T21:38:00-04:00</updated>
   <id>http://bsk.education/CS9/snap/2016/09/25/🔁-unit-2-loops</id>
   <content type="html">&lt;h2 id=&quot;learning-target&quot;&gt;🎯 Learning Target&lt;/h2&gt;
&lt;p&gt;I can explain that iteration is the repetition of part of an algorithm until a condition is met or for a specified number of times.&lt;/p&gt;

&lt;p&gt;I can create loops in SNAP to reduce the complexity of an existing algorithm.&lt;/p&gt;

&lt;h2 id=&quot;do-now&quot;&gt;Do Now&lt;/h2&gt;
&lt;p&gt;What is a “loop”? Where have you seen them before?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Redundancy&lt;/strong&gt;
Data that can be left out without loss of function. Repitition.
&lt;strong&gt;Readability&lt;/strong&gt;
Able to be read. Understandable.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://snap.berkeley.edu/snapsource/snap.html#present:Username=brettwo&amp;amp;ProjectName=Lesson%202.1%20Example&quot;&gt;Example&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;loop&quot;&gt;Loop&lt;/h2&gt;
&lt;p&gt;A type of block that causes other code to run multiple times in succession&lt;/p&gt;

&lt;p&gt;Help with:&lt;/p&gt;

&lt;h3 id=&quot;readability-of-code&quot;&gt;↑Readability of code&lt;/h3&gt;

&lt;h3 id=&quot;redundancy&quot;&gt;↓Redundancy&lt;/h3&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;lab-21---geometric-fun-times-v20&quot;&gt;Lab 2.1 - Geometric Fun Times v2.0™&lt;/h1&gt;
&lt;p&gt;Remember when you drew all those shapes? Didn’t it seem like it should be &lt;em&gt;easier&lt;/em&gt;? Well…&lt;/p&gt;

&lt;p&gt;In this lab, you will rewrite your SNAP programs from Lab 1.3 to draw shapes using &lt;strong&gt;loops&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;section-1---back-in-time&quot;&gt;Section 1 - Back In Time&lt;/h2&gt;

&lt;p&gt;Open your solution to the original &lt;a href=&quot;http://bsk.education/CS9/2016/09/15/lab-1-1/&quot;&gt;Lab 1.1&lt;/a&gt;. Go to the “File” menu and select “Save as…” to give your project a new name.&lt;/p&gt;

&lt;p&gt;If your shapes are not &lt;em&gt;already&lt;/em&gt; different colors and line-thicknesses, update them now.&lt;/p&gt;

&lt;h2 id=&quot;section-2---simplifying-code&quot;&gt;Section 2 - Simplifying Code&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Look at your code to draw a square. It is probably quite long and has lots of repeated blocks. Using what you have learned about loops, rewrite this script to be shorter and have less redundancy. Make sure that your code still works as originally intended.&lt;/li&gt;
  &lt;li&gt;Now modify your other shape scripts to also use loops. In all cases, try to have as few blocks and as little redundancy as possible while still keeping your code easy to read and understand.&lt;/li&gt;
  &lt;li&gt;Do you notice a pattern for the number of sides of a shape, the number of &lt;code class=&quot;highlighter-rouge&quot;&gt;repeat&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;turn 🔄 ___ degrees&lt;/code&gt; for each shape? Hmm…that’s interesting.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;section-3---lets-be-lazy&quot;&gt;Section 3 - Let’s be lazy.&lt;/h2&gt;

&lt;p&gt;We’re going to make a block called &lt;code class=&quot;highlighter-rouge&quot;&gt;shape&lt;/code&gt; and make it do all the work for us.
Add code to your program to draw the extra shapes below. Follow all the original guidelines (different color and line thickness for each shape, say the name while drawing) and use loops to keep your scripts as short as possible.&lt;/p&gt;

&lt;p&gt;How can you draw a circle? Are you &lt;em&gt;really&lt;/em&gt; drawing a circle?&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>🔚 Unit 1 Final Project</title>
   <link href="http://bsk.education/CS9/snap/2016/09/20/unit-1-final-project/"/>
   <updated>2016-09-20T23:25:00-04:00</updated>
   <id>http://bsk.education/CS9/snap/2016/09/20/unit-1-final-project</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;You will create a short animation in SNAP depicting a scene.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This could be a scene from a book/movie/play, depict lyrics from your favorite song, or your own unique animations&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Whenever the green flag is clicked, your SNAP animation should display your chosen scene line by line somewhere on the stage. (This should work correctly even if the last run was interrupted and restart.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;As each line is shown, sprites should act out the story.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The animation should advance on its own, but should do so at a pace that allows each action to complete and the viewer to read the line before the next line is shown and new action begins.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In addition, the sprites must act out the scene; you should not simply create a series of static backgrounds or costumes that show a stop-motion version of the story.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Each line must be readable and must stay shown while the corresponding action is occurring.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When the story ends, there should be a way for the user to replay the entire animation from the beginning.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You are free to be as creative as you like with your choice of sprites and actions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You may choose from the sprites provided by SNAP or create your own. (You will not be graded on your artistic skills.) You may interpret the scene literally or be clever with your depiction. However, &lt;em&gt;all sprites, behaviors, words, and animations must be school-appropriate.&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;implementation-details&quot;&gt;&lt;strong&gt;Implementation Details&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;As mentioned above, your animation must display the scene in its entirety and animate each line. Action must be performed by sprites and must consist of more than simply changing costumes. You must include the following components in your animation:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;At least two sprites that act in some way to contribute to the depiction of the story&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;At least one sprite that moves&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;At least one sprite that rotates&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;At least one sprite that changes costume&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;At least one sprite that is both hidden and shown at some point&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that multiple of these requirements may be satisfied by the same sprite (e.g. the same sprite can both move and change costume), but you must have at least two separate sprites that act in the animation.&lt;/p&gt;

&lt;h2 id=&quot;specifications&quot;&gt;Specifications&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Functional Correctness (Behavior)&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Points&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Animation depicts a full scene (or approved smaller portion)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2 points&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Scene is shown one line at a time&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2 points&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Each line is accompanied by sprites depicting the story, and all action is related to the current line&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3 points&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Clicking green flag starts animation from beginning&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1 point&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Animation progresses at a reasonable pace&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2 points&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;User is able to restart animation when it concludes&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2 points&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Total&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;12 points&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;**Technical Correctness (Implementation)     **&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Program shows good creativity and effort&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2 points&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;At least two sprites participate in the action&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2 points&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;At least one sprite moves&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1 points&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;At least one sprite rotates&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1 points&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;At least one sprite changes costume&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1 points&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;At least one sprite hides and/or appears&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1 points&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Total&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;8 points&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;PROJECT TOTAL&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;20 points&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</content>
 </entry>
 
 <entry>
   <title>🐶🐲🏃 First Animation</title>
   <link href="http://bsk.education/CS9/snap/2016/09/18/first-animation/"/>
   <updated>2016-09-18T21:34:00-04:00</updated>
   <id>http://bsk.education/CS9/snap/2016/09/18/first-animation</id>
   <content type="html">&lt;p&gt;In this lab, you will use costumes and movement to create simple SNAP animations.&lt;/p&gt;

&lt;h2 id=&quot;walk-the-dog&quot;&gt;🐶 Walk the Dog&lt;/h2&gt;

&lt;p&gt;1.1) In a SNAP project, click on the file menu, then click costumes. Import the costumes “dog2-b” and “dog2-c”.&lt;/p&gt;

&lt;p&gt;1.2) Write a script to make the sprite change costume each time the spacebar is pressed. The sprite should switch back and forth between the two costumes.&lt;/p&gt;

&lt;p&gt;1.3) Add code so that the sprite will face to the left, move a few steps, and change costume when the left arrow key is pressed. If you’ve done it right, it should look like the dog is walking when you press the left arrow key repeatedly.&lt;/p&gt;

&lt;p&gt;1.4) Add code so that the dog can walk to the right as well.&lt;/p&gt;

&lt;h2 id=&quot;dragons&quot;&gt;🐲 Dragons!&lt;/h2&gt;

&lt;p&gt;2.1) Create a new sprite. Following the same steps as in part 1.1, import the costumes “dragon1-a” and “dragon1-b”&lt;/p&gt;

&lt;p&gt;2.2) Write a script to make the sprite appear to breathe fire when the &lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt; key is pressed. The sprite should switch to the “fire-breathing” costume for a few seconds, then switch back to the “normal” costume.&lt;/p&gt;

&lt;p&gt;2.3) Modify your code so that the dragon “attacks” the mouse pointer when the ‘f’ key is pressed. When the &lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt; key is pressed, the dragon should take the following actions in order:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Make sure it is in the “normal” costume&lt;/li&gt;
  &lt;li&gt;Point at the mouse pointer&lt;/li&gt;
  &lt;li&gt;Glide to the mouse pointer’s position&lt;/li&gt;
  &lt;li&gt;Change to the “fire-breathing” costume&lt;/li&gt;
  &lt;li&gt;Pause to breathe fire&lt;/li&gt;
  &lt;li&gt;Change back to the “normal” costume&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;run-away&quot;&gt;🏃 Run Away!&lt;/h2&gt;
&lt;p&gt;3.1) Add another sprite to your program. (This sprite can have any costume you choose.)&lt;/p&gt;

&lt;p&gt;3.2) Write a script to make this new sprite point away from the dragon and move when the &lt;code class=&quot;highlighter-rouge&quot;&gt;r&lt;/code&gt; key is pressed. (You’ll need more than one block to do this.)&lt;/p&gt;

&lt;p&gt;3.3) Modify your code so that instead of moving when the &lt;code class=&quot;highlighter-rouge&quot;&gt;r&lt;/code&gt; key is pressed, the new sprite moves when the dragon “attacks.” The “fleeing” sprite should move when the dragon starts breathing fire.&lt;/p&gt;

&lt;p&gt;3.4) Add a second sprite that runs away from the dragon as well.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Lab 1⃣.1⃣</title>
   <link href="http://bsk.education/CS9/snap/2016/09/15/lab-1-1/"/>
   <updated>2016-09-15T07:32:00-04:00</updated>
   <id>http://bsk.education/CS9/snap/2016/09/15/lab-1⃣-1⃣</id>
   <content type="html">&lt;h1 id=&quot;geometric-fun-times&quot;&gt;Geometric Fun Times™&lt;/h1&gt;

&lt;p&gt;In this lab, you will write your first SNAP programs to draw some simple shapes on the stage.&lt;/p&gt;

&lt;h2 id=&quot;drawing-a-square&quot;&gt;1. Drawing a square&lt;/h2&gt;

&lt;p&gt;1.1) Write a SNAP script that &lt;strong&gt;draws a square&lt;/strong&gt; when the &lt;strong&gt;number &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;&lt;/strong&gt; is pressed on the keyboard. Remember that each corner of a square is a 90° angle.&lt;/p&gt;

&lt;p&gt;1.2) &lt;strong&gt;Add code&lt;/strong&gt; so that the sprite &lt;strong&gt;says the word “square”&lt;/strong&gt; while it is drawing. The sprite should &lt;strong&gt;stop&lt;/strong&gt; saying “square” once it has finished drawing the square.&lt;/p&gt;

&lt;p&gt;1.3) &lt;strong&gt;Add code&lt;/strong&gt; so that pressing the spacebar clears the pen marks from the stage.&lt;/p&gt;

&lt;p&gt;Comment your code explaining your work.&lt;/p&gt;

&lt;h2 id=&quot;adding-more-shapes&quot;&gt;2. Adding more shapes&lt;/h2&gt;

&lt;p&gt;2.1) Now that you’ve drawn a square, add code to draw the shapes in the following table. Each shape should be drawn when the number next to it is pressed on the keyboard. (For example, pressing 3 on the keyboard should draw a diamond.)&lt;/p&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;td&gt;When this key is pressed...&lt;/td&gt;
    &lt;td&gt;Draw a ...&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;Square&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;code&gt;2&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;Equilateral triangle&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;code&gt;3&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;Diamond&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;code&gt;4&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;Pentagon&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;code&gt;5&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;Parallelogram (&quot;leaning rectangle&quot;)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;code&gt;6&lt;/code&gt; &lt;/td&gt;
    &lt;td&gt;5-pointed star&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;You will probably want to draw a sketch of each to figure out the angles in each shape.&lt;/p&gt;

&lt;p&gt;2.2) &lt;strong&gt;Add code&lt;/strong&gt; so that as each shape is being drawn, the sprite is saying the name of shape. The sprite should &lt;strong&gt;stop&lt;/strong&gt; saying the name of the sprite when it is finished drawing.&lt;/p&gt;

&lt;p&gt;2.3) &lt;strong&gt;Modify&lt;/strong&gt; your code so that each different shape is drawn in a &lt;strong&gt;&lt;em&gt;different&lt;/em&gt;&lt;/strong&gt; color and with a &lt;strong&gt;&lt;em&gt;different&lt;/em&gt;&lt;/strong&gt; line &lt;strong&gt;&lt;em&gt;thick&lt;/em&gt;&lt;/strong&gt;ness. So, for example, if the square is drawn in &lt;strong&gt;blue&lt;/strong&gt; with a line thickness of 3, each other shape must be drawn in a color that is &lt;strong&gt;not&lt;/strong&gt; blue and with a line thickness that is &lt;strong&gt;not&lt;/strong&gt; 3. You can choose whatever colors your want.&lt;/p&gt;

&lt;p&gt;2.4) &lt;strong&gt;Add&lt;/strong&gt; code so that the sprite is hidden when it is not drawing. This is will make sure that the sprite is not obstructing the view of your beautiful artwork!&lt;/p&gt;

&lt;p&gt;3) &lt;strong&gt;Comment your code!&lt;/strong&gt; What did you do? Where did you get stuck? How did you fix it?&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Lab 1⃣</title>
   <link href="http://bsk.education/CS9/snap/2016/09/13/lab-1/"/>
   <updated>2016-09-13T20:51:00-04:00</updated>
   <id>http://bsk.education/CS9/snap/2016/09/13/lab-1⃣</id>
   <content type="html">&lt;h2 id=&quot;learning-targets&quot;&gt;🎯 Learning Targets&lt;/h2&gt;
&lt;p&gt;I can explain in writing the expected outcome of a piece of code.   &lt;br /&gt;
I can complete a CS lab to specification.&lt;/p&gt;

&lt;h2 id=&quot;do-now&quot;&gt;👉 Do Now&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Login to Classroom and open Lab 1.0.&lt;/li&gt;
  &lt;li&gt;Complete the &lt;strong&gt;Do Now&lt;/strong&gt; portion of the lab.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;lab-days&quot;&gt;Lab Days&lt;/h2&gt;

&lt;p&gt;This is our first Lab Day. You will be working at your own pace on a series of programming challenges and projects. You are welcome to consult teachers or classmates for help or hints (and you are more than welcome to help others), but your work must be your own, and you must be able to explain it.&lt;/p&gt;

&lt;p&gt;The expectation for Lab Days is that you are documenting your work in your code, giving credit to classmates or any other sources of assistance and inspiration.&lt;/p&gt;

&lt;p&gt;Good luck, and have fun!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Day 0⃣</title>
   <link href="http://bsk.education/CS9/snap/2016/09/08/day-1/"/>
   <updated>2016-09-08T22:19:56-04:00</updated>
   <id>http://bsk.education/CS9/snap/2016/09/08/day-1</id>
   <content type="html">&lt;h2 id=&quot;learning-target&quot;&gt;🎯 Learning Target&lt;/h2&gt;
&lt;p&gt;I can create a SNAP login and write functional code in SNAP.
I can define &lt;em&gt;algorithm&lt;/em&gt; and give examples.&lt;/p&gt;

&lt;h2 id=&quot;do-now&quot;&gt;👉 Do Now&lt;/h2&gt;
&lt;p&gt;Join Google Classroom code &lt;code class=&quot;highlighter-rouge&quot;&gt;6tneev&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In Google Classroom:&lt;/strong&gt; What is an algorithm?&lt;/p&gt;

&lt;h2 id=&quot;notes&quot;&gt;Notes&lt;/h2&gt;
&lt;p&gt;Computers follow a set of instructions called a &lt;strong&gt;__&lt;/strong&gt;_____.&lt;/p&gt;

&lt;p&gt;Programs are written in &lt;strong&gt;__&lt;/strong&gt;&lt;em&gt;__&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;There are different programming &lt;strong&gt;__&lt;/strong&gt;&lt;em&gt;__&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;We will be learning one called &lt;strong&gt;__&lt;/strong&gt;&lt;em&gt;__&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;What are you better at than a computer? What is a computer better at?&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Markup&lt;/th&gt;
      &lt;th&gt;Programming&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Using syntax to  displaying information  &lt;code class=&quot;highlighter-rouge&quot;&gt;HTML&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Giving instructions given to a computer. &lt;code class=&quot;highlighter-rouge&quot;&gt;p5, Python&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Descriptive&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Procedural&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;“The car has four doors!”&lt;/td&gt;
      &lt;td&gt;“Open the car doors!”&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Algorithms are &lt;strong&gt;procedural&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;lab-time&quot;&gt;Lab Time&lt;/h2&gt;
&lt;p&gt;Login to Google Classroom and complete “Getting set up in SNAP.”&lt;/p&gt;

&lt;p&gt;Good luck have fun goodbye don’t bother me… 🎉&lt;/p&gt;

&lt;h2 id=&quot;debrief&quot;&gt;Debrief&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;What was challenging?&lt;/li&gt;
  &lt;li&gt;What was similar to programming you’ve done before? What was different?&lt;/li&gt;
  &lt;li&gt;Why can’t we just program in English?&lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>🎉Hello World</title>
   <link href="http://bsk.education/CS9/snap/2016/09/08/hello-world/"/>
   <updated>2016-09-08T00:00:00-04:00</updated>
   <id>http://bsk.education/CS9/snap/2016/09/08/hello-world</id>
   <content type="html">&lt;p&gt;🎯 &lt;strong&gt;Learning Target:&lt;/strong&gt; I can describe the role of creativity in Computer Science.&lt;/p&gt;

&lt;p&gt;👉 &lt;strong&gt;Do Now:&lt;/strong&gt; Why does the new iPhone 7 &lt;strong&gt;not&lt;/strong&gt; have a headphone jack?&lt;/p&gt;

&lt;p&gt;Welcome to the first day of Computer Science.&lt;/p&gt;

&lt;p&gt;This semester, we’re going to focus on the &lt;strong&gt;fundamentals&lt;/strong&gt;. Today, we’re going to focus on &lt;strong&gt;creativity&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Before you create with a computer (and you will be, don’t worry), you’re going to create with paper.&lt;/p&gt;

&lt;h2 id=&quot;draw-1&quot;&gt;Draw 1&lt;/h2&gt;

&lt;p&gt;How good are you at giving direction?&lt;/p&gt;

&lt;h2 id=&quot;draw-2&quot;&gt;Draw 2&lt;/h2&gt;

&lt;p&gt;How does collaboration impact creativity?&lt;/p&gt;

&lt;h2 id=&quot;draw-3&quot;&gt;Draw 3&lt;/h2&gt;

&lt;p&gt;How creative can you be on a computer?&lt;/p&gt;
</content>
 </entry>
 

</feed>
