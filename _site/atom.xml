<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>CS9</title>
 <link href="http://bsk.education/CS9/atom.xml" rel="self"/>
 <link href="http://bsk.education/CS9/"/>
 <updated>2016-10-19T14:59:26-04:00</updated>
 <id>http://bsk.education/CS9</id>
 <author>
   <name>Ben Samuels-Kalow</name>
   <email>bsk@ms223.org</email>
 </author>

 
 <entry>
   <title>üî¢ Lists!</title>
   <link href="http://bsk.education/CS9/2016/10/17/lists/"/>
   <updated>2016-10-17T09:30:00-04:00</updated>
   <id>http://bsk.education/CS9/2016/10/17/üî¢-lists</id>
   <content type="html">&lt;h2 id=&quot;learning-targets&quot;&gt;Learning Targets&lt;/h2&gt;
&lt;p&gt;I can create, modify, and access lists in SNAP.&lt;/p&gt;

&lt;h2 id=&quot;do-now-on-paper&quot;&gt;Do Now (on paper)&lt;/h2&gt;
&lt;p&gt;Write an algorithm to reverse the order of any sentence.
For example, your algorithm would make the Do Now turn into:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;‚ÄúSentence a of order the reverse to algorithm an write.‚Äù&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;pseudocode&quot;&gt;Pseudocode&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sentence = word_1 + word_2 + word_3 + ‚Ä¶ + word_n&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ecnetnes = word_n + ‚Ä¶ + word_3 + word _ 2 + word_1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We need &lt;strong&gt;variables&lt;/strong&gt; But we don‚Äôt know &lt;strong&gt;how many&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;variables-vs-lists&quot;&gt;Variables vs. Lists&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Variables&lt;/strong&gt; store a single value in a single location.
&lt;strong&gt;Lists&lt;/strong&gt; store multiple values in a single location.&lt;/p&gt;

&lt;h2 id=&quot;list-traversal&quot;&gt;List Traversal&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Looking at each element of a list in order and performing some operation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ex. Say each person‚Äôs name, count the number of May birthdays, find the average GPA‚Ä¶&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;index&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;split&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;join&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;sdrawkcab&quot;&gt;Sdrawkcab&lt;/h2&gt;
&lt;p&gt;Build a SNAP block that reverses the order of a sentence by splitting it into a list.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Lab 3‚É£.0‚É£ Guessing Game</title>
   <link href="http://bsk.education/CS9/2016/10/13/lab-3-0-guessing-game/"/>
   <updated>2016-10-13T22:18:00-04:00</updated>
   <id>http://bsk.education/CS9/2016/10/13/lab-3‚É£-0‚É£-guessing-game</id>
   <content type="html">&lt;p&gt;In this lab, you will use conditional statements and variables to build a simple number guessing game.&lt;/p&gt;

&lt;h2 id=&quot;section-1---im-thinking-of-a-number&quot;&gt;Section 1 - I‚Äôm Thinking of a Number‚Ä¶&lt;/h2&gt;
&lt;p&gt;You will write a SNAP program to choose a random number between 1 and 10 and then ask the user to guess a number.&lt;/p&gt;

&lt;p&gt;If the user‚Äôs guess matches the random number, the user wins. If not, the user loses. In either case, the user should be shown a message indicating whether she won or lost and the secret random number should be revealed.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Write the simple version of the guessing game program described above.&lt;/li&gt;
  &lt;li&gt;Modify the program to keep asking the user for guesses until the correct number is given. Be sure to give a message after each guess, but only reveal the secret number when the user has guessed correctly and the game is over.&lt;/li&gt;
  &lt;li&gt;Add code to ask the player their name at the start of the game. Then, personalize the message for an incorrect guess by adding the player‚Äôs name. For example, if Scout is playing the game, then the message should say ‚ÄúSorry, Scout, that guess is not correct‚Äù instead of just ‚ÄúSorry‚Äù when Scout guesses incorrectly.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-2---game-upgrades&quot;&gt;Section 2 - Game Upgrades&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Modify your guessing game so that the player can decide the range of possible numbers from which the secret number can be chosen. After asking the player‚Äôs name, ask what she wants the highest possible number to be. Then, instead of choosing a random number between 1 and 10, choose a random number between 1 and the number the player requested.&lt;/li&gt;
  &lt;li&gt;Add code to keep track of how many guesses the player has made. After the player guesses correctly, inform her how many tries it took before the correct number was guessed.&lt;/li&gt;
  &lt;li&gt;Increase the player‚Äôs chances by telling her whether the guessed number is too high or too low instead of just that it is incorrect.&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>‚ùìUnit 3: Variables</title>
   <link href="http://bsk.education/CS9/2016/10/13/variables-guessing-game/"/>
   <updated>2016-10-13T22:04:00-04:00</updated>
   <id>http://bsk.education/CS9/2016/10/13/‚ùìvariables-guessing-game</id>
   <content type="html">&lt;h2 id=&quot;learning-target&quot;&gt;Learning Target&lt;/h2&gt;
&lt;p&gt;I can create variables in SNAP.&lt;/p&gt;

&lt;h2 id=&quot;do-now-in-google-classroom&quot;&gt;Do Now (In Google Classroom)&lt;/h2&gt;
&lt;p&gt;What is a variable?   &lt;br /&gt;
Why are they useful in programming?&lt;/p&gt;

&lt;h2 id=&quot;variable&quot;&gt;Variable&lt;/h2&gt;
&lt;p&gt;A ‚Äúplace‚Äù to store information.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://bsk.education/CS9/images/SNAPaskAnswer.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://bsk.education/CS9/images/SNAPaskaskanswer.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://bsk.education/CS9/images/SNAPterriblebetter.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>üèì Pong!</title>
   <link href="http://bsk.education/CS9/2016/10/05/pong/"/>
   <updated>2016-10-05T22:54:00-04:00</updated>
   <id>http://bsk.education/CS9/2016/10/05/üèì-pong</id>
   <content type="html">&lt;h2 id=&quot;specifications-&quot;&gt;‚òÖ Specifications ‚òÖ&lt;/h2&gt;

&lt;h3 id=&quot;gameplay&quot;&gt;Gameplay&lt;/h3&gt;

&lt;p&gt;The ball bounces off the upper and lower edges of the field and the players‚Äô paddles. Each time the ball bounces off a paddle, its speed increases by a small amount. When the ball bounces off a paddle, its direction is reversed with a small random variation to add unpredictability to the game. It‚Äôs like ping pong, but for nerds. It‚Äôs like ping pong.&lt;/p&gt;

&lt;h3 id=&quot;scoring&quot;&gt;Scoring&lt;/h3&gt;
&lt;p&gt;‚≠ê If the ball touches the left or right edge of the field, a point is scored for the opposite player.    &lt;br /&gt;
‚≠ê When one player reaches 5 points, the game is over and that player is the winner. The winner is announced on the screen and the player is given the opportunity to start a new game.&lt;/p&gt;

&lt;h3 id=&quot;player-control&quot;&gt;Player Control&lt;/h3&gt;
&lt;p&gt;‚≠ê Paddles are positioned a short distance away from the side they are defending, and can only move up and down, not side to side.    &lt;br /&gt;
‚≠ê The player can control the paddle with your choice of keys or the mouse.   &lt;br /&gt;
‚≠ê The other paddle should be controlled by THE COMPUTER&lt;/p&gt;

&lt;h2 id=&quot;checklist&quot;&gt;‚òëÔ∏è Checklist&lt;/h2&gt;

&lt;h3 id=&quot;custom-blocks&quot;&gt;Custom Blocks&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Throughout your program, you should use custom blocks to generalize common operation, like keeping score.&lt;/li&gt;
  &lt;li&gt;Your program must include at least three custom blocks, at least one of which must take inputs.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;required-checkpoints&quot;&gt;Required Checkpoints&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Players control their paddle.&lt;/li&gt;
  &lt;li&gt;The ball starts in the middle (INITIALIZE), moves in a random direction, and bounce.&lt;/li&gt;
  &lt;li&gt;The ball speeds up when it hits a paddle, and resets to the middle when it hits the left or right edge&lt;/li&gt;
  &lt;li&gt;A point is scored when the ball hits the edge on the opponent‚Äôs side of the field; the game ends when one player reaches five points; players can start a new game after the game ends&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>üî® Custom Blocks</title>
   <link href="http://bsk.education/CS9/2016/10/05/Custom-Blocks/"/>
   <updated>2016-10-05T22:22:00-04:00</updated>
   <id>http://bsk.education/CS9/2016/10/05/üî®-Custom-Blocks</id>
   <content type="html">&lt;h2 id=&quot;learning-target&quot;&gt;üéØ Learning Target&lt;/h2&gt;

&lt;p&gt;I can create my own blocks to create custom functions in SNAP.&lt;/p&gt;

&lt;h2 id=&quot;do-now-in-google-classroom&quot;&gt;Do Now (in Google Classroom)&lt;/h2&gt;

&lt;p&gt;Find this block‚Ä¶ if you can‚Ä¶
&lt;img src=&quot;http://bsk.education/CS9/images/SNAPscorefor.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;custom-blocks&quot;&gt;Custom Blocks&lt;/h2&gt;

&lt;p&gt;How do you think this works?
&lt;img src=&quot;http://bsk.education/CS9/images/SNAPscoreforDefinition.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;block-explore&quot;&gt;üîÑ Block explore&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://bsk.education/CS9/images/SNAPstartBall.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://bsk.education/CS9/images/SNAPbounce.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://bsk.education/CS9/images/SNAPpickRandomDirection.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>üçÇ Lab 2‚É£.3‚É£ Defining Gravity</title>
   <link href="http://bsk.education/CS9/2016/09/29/lab-2-3-defining-gravity/"/>
   <updated>2016-09-29T07:20:00-04:00</updated>
   <id>http://bsk.education/CS9/2016/09/29/üçÇ-lab-2-3-defining-gravity</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;In this lab, you will use everything you‚Äôve learned about loops and conditionals to construct a simplified model for gravity.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-goes-up&quot;&gt;What goes up‚Ä¶üê∂&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Create a SNAP program with a background that looks like an outside scene. Add a single sprite that looks like an object of your choice (a brick or a ball would work well) and place it so it is touching the ‚Äúground.‚Äù&lt;/li&gt;
  &lt;li&gt;Write code for your sprite so that, when the green flag is clicked, the object moves to the top of the stage and ‚Äúfalls‚Äù towards the bottom at a constant speed.&lt;/li&gt;
  &lt;li&gt;What happens in your program when the object hits the ‚Äúground‚Äù? Is that an accurate model of how gravity works on Earth?&lt;/li&gt;
  &lt;li&gt;Modify your program so that the problem you identified in part 3 is fixed. Make your object do something appropriate when it hits the ‚Äúground.‚Äù (Making sure the ground is a unique color and making use of that color will be helpful.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;‚úÖ &lt;strong&gt;Check: Press Green Flag, object falls from top of the screen, hits the ground, and looks like it‚Äôs hitting the ground.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;must-come-down&quot;&gt;‚Ä¶Must Come Down&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Add a second sprite that looks like something that might already be on the ground when your first object is falling (like a house, a picnic table, a person, etc.). Put this new object directly below where the first object falls so that the falling object will hit it.&lt;/li&gt;
  &lt;li&gt;What should happen when the following object hits the object on the ground? Will that happen with the model we currently have? Why or why not?&lt;/li&gt;
  &lt;li&gt;Modify your code so that you fix the problem you identified in part 2.2. Make your falling object do something appropriate if it hits the object on the ground. Once you‚Äôve made that work, move the falling object and make sure you didn‚Äôt break the situation when the falling object doesn‚Äôt hit something on the way down.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;‚úÖ &lt;strong&gt;Check: Code for a collision between two objects, and a miss.&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Add code so that both objects move to a random x coordinate every time the green flag is clicked. The falling object should be at the top of the stage, and the other object at the bottom. Verify that the falling object does the right thing no matter where the two objects end up relative to each other.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add a hill to your outdoor scene and make sure that your falling object does something appropriate when it hits the hill.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;‚úÖ &lt;strong&gt;Check: Green Flag sets random position. Object falls, collides or ‚Äúrolls.‚Äù&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>‚ûø Nested Loops</title>
   <link href="http://bsk.education/CS9/2016/09/28/nested-loops/"/>
   <updated>2016-09-28T21:32:00-04:00</updated>
   <id>http://bsk.education/CS9/2016/09/28/‚ûø-nested-loops</id>
   <content type="html">&lt;h2 id=&quot;learning-target&quot;&gt;üéØ Learning Target&lt;/h2&gt;
&lt;p&gt;I can use nested loops to solve programming problems.&lt;/p&gt;

&lt;h2 id=&quot;do-now-in-google-classroom&quot;&gt;Do Now (in Google Classroom)&lt;/h2&gt;
&lt;p&gt;Why are loops useful?&lt;/p&gt;

&lt;p&gt;Let‚Äôs look an example. Write code to draw two squares, next to each other.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://snap.berkeley.edu/snapsource/snap.html#present:Username=223bsk&amp;amp;ProjectName=nestedLoops&quot;&gt;‚¨õ‚¨õ&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;nested-loops&quot;&gt;Nested Loops&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;A loop in a loop.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;In other words‚Ä¶&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://bsk.education/CS9/images/NestedLoops.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;How many times will the sprite take 20 steps?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://bsk.education/CS9/images/NestedLoopsRepeat.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;lab-22---its-brick&quot;&gt;Lab 2.2 - It‚Äôs Brick&lt;/h2&gt;

&lt;p&gt;In this lab, you will use nested loops to draw a large brick wall using as little code as possible.&lt;/p&gt;

&lt;h2 id=&quot;part-1---build-a-brick&quot;&gt;Part 1 - Build a Brick&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Write a SNAP script to draw a single 20x10 ‚Äúbrick‚Äù in the lower left corner of the stage when the green flag is clicked.&lt;/li&gt;
  &lt;li&gt;Modify your code to draw two bricks side by side. The bricks should share a short edge.&lt;/li&gt;
  &lt;li&gt;Now modify your code again to build a full row of bricks across the entire length of the stage. Use loop to keep your code as concise as possible. Remember that the stage is 480 pixels wide and 360 pixels tall (by default- you can change that).&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;part-2---build-a-wall&quot;&gt;Part 2 - Build a Wall&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Now that you can build a row of bricks, add code to build a second row above the first row. The bricks in the second row should share a long edge with those in the first row, but should be ‚Äúoffset‚Äù so that the ends of the second row bricks are at the middle of the first row bricks.&lt;/li&gt;
  &lt;li&gt;Modify your code to build more rows, alternating back and forth between the ‚Äúregular‚Äù and ‚Äúoffset‚Äù rows. Use nested loops to keep your code concise.&lt;/li&gt;
  &lt;li&gt;Finish off the wall the by building alternating rows all the way to the top of the stage. Remember that the stage is 360 pixels tall. Your final wall should look like this:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;http://bsk.education/CS9/images/Bricks.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Can you build the whole wall with one nested loop?&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>üîÅ Unit 2: Loops</title>
   <link href="http://bsk.education/CS9/2016/09/25/unit-2-loops/"/>
   <updated>2016-09-25T21:38:00-04:00</updated>
   <id>http://bsk.education/CS9/2016/09/25/üîÅ-unit-2-loops</id>
   <content type="html">&lt;h2 id=&quot;learning-target&quot;&gt;üéØ Learning Target&lt;/h2&gt;
&lt;p&gt;I can explain that iteration is the repetition of part of an algorithm until a condition is met or for a specified number of times.&lt;/p&gt;

&lt;p&gt;I can create loops in SNAP to reduce the complexity of an existing algorithm.&lt;/p&gt;

&lt;h2 id=&quot;do-now&quot;&gt;Do Now&lt;/h2&gt;
&lt;p&gt;What is a ‚Äúloop‚Äù? Where have you seen them before?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Redundancy&lt;/strong&gt;
Data that can be left out without loss of function. Repitition.
&lt;strong&gt;Readability&lt;/strong&gt;
Able to be read. Understandable.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://snap.berkeley.edu/snapsource/snap.html#present:Username=brettwo&amp;amp;ProjectName=Lesson%202.1%20Example&quot;&gt;Example&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;loop&quot;&gt;Loop&lt;/h2&gt;
&lt;p&gt;A type of block that causes other code to run multiple times in succession&lt;/p&gt;

&lt;p&gt;Help with:&lt;/p&gt;

&lt;h3 id=&quot;readability-of-code&quot;&gt;‚ÜëReadability of code&lt;/h3&gt;

&lt;h3 id=&quot;redundancy&quot;&gt;‚ÜìRedundancy&lt;/h3&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;lab-21---geometric-fun-times-v20&quot;&gt;Lab 2.1 - Geometric Fun Times v2.0‚Ñ¢&lt;/h1&gt;
&lt;p&gt;Remember when you drew all those shapes? Didn‚Äôt it seem like it should be &lt;em&gt;easier&lt;/em&gt;? Well‚Ä¶&lt;/p&gt;

&lt;p&gt;In this lab, you will rewrite your SNAP programs from Lab 1.3 to draw shapes using &lt;strong&gt;loops&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;section-1---back-in-time&quot;&gt;Section 1 - Back In Time&lt;/h2&gt;

&lt;p&gt;Open your solution to the original &lt;a href=&quot;http://bsk.education/CS9/2016/09/15/lab-1-1/&quot;&gt;Lab 1.1&lt;/a&gt;. Go to the ‚ÄúFile‚Äù menu and select ‚ÄúSave as‚Ä¶‚Äù to give your project a new name.&lt;/p&gt;

&lt;p&gt;If your shapes are not &lt;em&gt;already&lt;/em&gt; different colors and line-thicknesses, update them now.&lt;/p&gt;

&lt;h2 id=&quot;section-2---simplifying-code&quot;&gt;Section 2 - Simplifying Code&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Look at your code to draw a square. It is probably quite long and has lots of repeated blocks. Using what you have learned about loops, rewrite this script to be shorter and have less redundancy. Make sure that your code still works as originally intended.&lt;/li&gt;
  &lt;li&gt;Now modify your other shape scripts to also use loops. In all cases, try to have as few blocks and as little redundancy as possible while still keeping your code easy to read and understand.&lt;/li&gt;
  &lt;li&gt;Do you notice a pattern for the number of sides of a shape, the number of &lt;code class=&quot;highlighter-rouge&quot;&gt;repeat&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;turn üîÑ ___ degrees&lt;/code&gt; for each shape? Hmm‚Ä¶that‚Äôs interesting.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;section-3---lets-be-lazy&quot;&gt;Section 3 - Let‚Äôs be lazy.&lt;/h2&gt;

&lt;p&gt;We‚Äôre going to make a block called &lt;code class=&quot;highlighter-rouge&quot;&gt;shape&lt;/code&gt; and make it do all the work for us.
Add code to your program to draw the extra shapes below. Follow all the original guidelines (different color and line thickness for each shape, say the name while drawing) and use loops to keep your scripts as short as possible.&lt;/p&gt;

&lt;p&gt;How can you draw a circle? Are you &lt;em&gt;really&lt;/em&gt; drawing a circle?&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>üîö Unit 1 Final Project</title>
   <link href="http://bsk.education/CS9/2016/09/20/unit-1-final-project/"/>
   <updated>2016-09-20T23:25:00-04:00</updated>
   <id>http://bsk.education/CS9/2016/09/20/unit-1-final-project</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;You will create a short animation in SNAP depicting a scene.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This could be a scene from a book/movie/play, depict lyrics from your favorite song, or your own unique animations&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Whenever the green flag is clicked, your SNAP animation should display your chosen scene line by line somewhere on the stage. (This should work correctly even if the last run was interrupted and restart.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;As each line is shown, sprites should act out the story.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The animation should advance on its own, but should do so at a pace that allows each action to complete and the viewer to read the line before the next line is shown and new action begins.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In addition, the sprites must act out the scene; you should not simply create a series of static backgrounds or costumes that show a stop-motion version of the story.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Each line must be readable and must stay shown while the corresponding action is occurring.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When the story ends, there should be a way for the user to replay the entire animation from the beginning.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You are free to be as creative as you like with your choice of sprites and actions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You may choose from the sprites provided by SNAP or create your own. (You will not be graded on your artistic skills.) You may interpret the scene literally or be clever with your depiction. However, &lt;em&gt;all sprites, behaviors, words, and animations must be school-appropriate.&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;implementation-details&quot;&gt;&lt;strong&gt;Implementation Details&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;As mentioned above, your animation must display the scene in its entirety and animate each line. Action must be performed by sprites and must consist of more than simply changing costumes. You must include the following components in your animation:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;At least two sprites that act in some way to contribute to the depiction of the story&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;At least one sprite that moves&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;At least one sprite that rotates&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;At least one sprite that changes costume&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;At least one sprite that is both hidden and shown at some point&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that multiple of these requirements may be satisfied by the same sprite (e.g. the same sprite can both move and change costume), but you must have at least two separate sprites that act in the animation.&lt;/p&gt;

&lt;h2 id=&quot;specifications&quot;&gt;Specifications&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Functional Correctness (Behavior)&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Points&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Animation depicts a full scene (or approved smaller portion)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2 points&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Scene is shown one line at a time&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2 points&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Each line is accompanied by sprites depicting the story, and all action is related to the current line&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3 points&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Clicking green flag starts animation from beginning&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1 point&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Animation progresses at a reasonable pace&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2 points&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;User is able to restart animation when it concludes&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2 points&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Total&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;12 points&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;**Technical Correctness (Implementation)     **&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;¬†&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Program shows good creativity and effort&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2 points&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;At least two sprites participate in the action&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2 points&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;At least one sprite moves&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1 points&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;At least one sprite rotates&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1 points&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;At least one sprite changes costume&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1 points&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;At least one sprite hides and/or appears&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1 points&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Total&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;8 points&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;PROJECT TOTAL&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;20 points&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</content>
 </entry>
 
 <entry>
   <title>üê∂üê≤üèÉ First Animation</title>
   <link href="http://bsk.education/CS9/2016/09/18/first-animation/"/>
   <updated>2016-09-18T21:34:00-04:00</updated>
   <id>http://bsk.education/CS9/2016/09/18/first-animation</id>
   <content type="html">&lt;p&gt;In this lab, you will use costumes and movement to create simple SNAP animations.&lt;/p&gt;

&lt;h2 id=&quot;walk-the-dog&quot;&gt;üê∂ Walk the Dog&lt;/h2&gt;

&lt;p&gt;1.1) In a SNAP project, click on the file menu, then click costumes. Import the costumes ‚Äúdog2-b‚Äù and ‚Äúdog2-c‚Äù.&lt;/p&gt;

&lt;p&gt;1.2) Write a script to make the sprite change costume each time the spacebar is pressed. The sprite should switch back and forth between the two costumes.&lt;/p&gt;

&lt;p&gt;1.3) Add code so that the sprite will face to the left, move a few steps, and change costume when the left arrow key is pressed. If you‚Äôve done it right, it should look like the dog is walking when you press the left arrow key repeatedly.&lt;/p&gt;

&lt;p&gt;1.4) Add code so that the dog can walk to the right as well.&lt;/p&gt;

&lt;h2 id=&quot;dragons&quot;&gt;üê≤ Dragons!&lt;/h2&gt;

&lt;p&gt;2.1) Create a new sprite. Following the same steps as in part 1.1, import the costumes ‚Äúdragon1-a‚Äù and ‚Äúdragon1-b‚Äù&lt;/p&gt;

&lt;p&gt;2.2) Write a script to make the sprite appear to breathe fire when the &lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt; key is pressed. The sprite should switch to the ‚Äúfire-breathing‚Äù costume for a few seconds, then switch back to the ‚Äúnormal‚Äù costume.&lt;/p&gt;

&lt;p&gt;2.3) Modify your code so that the dragon ‚Äúattacks‚Äù the mouse pointer when the ‚Äòf‚Äô key is pressed. When the &lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt; key is pressed, the dragon should take the following actions in order:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Make sure it is in the ‚Äúnormal‚Äù costume&lt;/li&gt;
  &lt;li&gt;Point at the mouse pointer&lt;/li&gt;
  &lt;li&gt;Glide to the mouse pointer‚Äôs position&lt;/li&gt;
  &lt;li&gt;Change to the ‚Äúfire-breathing‚Äù costume&lt;/li&gt;
  &lt;li&gt;Pause to breathe fire&lt;/li&gt;
  &lt;li&gt;Change back to the ‚Äúnormal‚Äù costume&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;run-away&quot;&gt;üèÉ Run Away!&lt;/h2&gt;
&lt;p&gt;3.1) Add another sprite to your program. (This sprite can have any costume you choose.)&lt;/p&gt;

&lt;p&gt;3.2) Write a script to make this new sprite point away from the dragon and move when the &lt;code class=&quot;highlighter-rouge&quot;&gt;r&lt;/code&gt; key is pressed. (You‚Äôll need more than one block to do this.)&lt;/p&gt;

&lt;p&gt;3.3) Modify your code so that instead of moving when the &lt;code class=&quot;highlighter-rouge&quot;&gt;r&lt;/code&gt; key is pressed, the new sprite moves when the dragon ‚Äúattacks.‚Äù The ‚Äúfleeing‚Äù sprite should move when the dragon starts breathing fire.&lt;/p&gt;

&lt;p&gt;3.4) Add a second sprite that runs away from the dragon as well.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Lab 1‚É£.1‚É£</title>
   <link href="http://bsk.education/CS9/2016/09/15/lab-1-1/"/>
   <updated>2016-09-15T07:32:00-04:00</updated>
   <id>http://bsk.education/CS9/2016/09/15/lab-1‚É£-1‚É£</id>
   <content type="html">&lt;h1 id=&quot;geometric-fun-times&quot;&gt;Geometric Fun Times‚Ñ¢&lt;/h1&gt;

&lt;p&gt;In this lab, you will write your first SNAP programs to draw some simple shapes on the stage.&lt;/p&gt;

&lt;h2 id=&quot;drawing-a-square&quot;&gt;1. Drawing a square&lt;/h2&gt;

&lt;p&gt;1.1) Write a SNAP script that &lt;strong&gt;draws a square&lt;/strong&gt; when the &lt;strong&gt;number &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;&lt;/strong&gt; is pressed on the keyboard. Remember that each corner of a square is a 90¬∞ angle.&lt;/p&gt;

&lt;p&gt;1.2) &lt;strong&gt;Add code&lt;/strong&gt; so that the sprite &lt;strong&gt;says the word ‚Äúsquare‚Äù&lt;/strong&gt; while it is drawing. The sprite should &lt;strong&gt;stop&lt;/strong&gt; saying ‚Äúsquare‚Äù once it has finished drawing the square.&lt;/p&gt;

&lt;p&gt;1.3) &lt;strong&gt;Add code&lt;/strong&gt; so that pressing the spacebar clears the pen marks from the stage.&lt;/p&gt;

&lt;p&gt;Comment your code explaining your work.&lt;/p&gt;

&lt;h2 id=&quot;adding-more-shapes&quot;&gt;2. Adding more shapes&lt;/h2&gt;

&lt;p&gt;2.1) Now that you‚Äôve drawn a square, add code to draw the shapes in the following table. Each shape should be drawn when the number next to it is pressed on the keyboard. (For example, pressing 3 on the keyboard should draw a diamond.)&lt;/p&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;td&gt;When this key is pressed...&lt;/td&gt;
    &lt;td&gt;Draw a ...&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;Square&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;code&gt;2&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;Equilateral triangle&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;code&gt;3&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;Diamond&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;code&gt;4&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;Pentagon&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;code&gt;5&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;Parallelogram (&quot;leaning rectangle&quot;)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;code&gt;6&lt;/code&gt; &lt;/td&gt;
    &lt;td&gt;5-pointed star&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;You will probably want to draw a sketch of each to figure out the angles in each shape.&lt;/p&gt;

&lt;p&gt;2.2) &lt;strong&gt;Add code&lt;/strong&gt; so that as each shape is being drawn, the sprite is saying the name of shape. The sprite should &lt;strong&gt;stop&lt;/strong&gt; saying the name of the sprite when it is finished drawing.&lt;/p&gt;

&lt;p&gt;2.3) &lt;strong&gt;Modify&lt;/strong&gt; your code so that each different shape is drawn in a &lt;strong&gt;&lt;em&gt;different&lt;/em&gt;&lt;/strong&gt; color and with a &lt;strong&gt;&lt;em&gt;different&lt;/em&gt;&lt;/strong&gt; line &lt;strong&gt;&lt;em&gt;thick&lt;/em&gt;&lt;/strong&gt;ness. So, for example, if the square is drawn in &lt;strong&gt;blue&lt;/strong&gt; with a line thickness of 3, each other shape must be drawn in a color that is &lt;strong&gt;not&lt;/strong&gt; blue and with a line thickness that is &lt;strong&gt;not&lt;/strong&gt; 3. You can choose whatever colors your want.&lt;/p&gt;

&lt;p&gt;2.4) &lt;strong&gt;Add&lt;/strong&gt; code so that the sprite is hidden when it is not drawing. This is will make sure that the sprite is not obstructing the view of your beautiful artwork!&lt;/p&gt;

&lt;p&gt;3) &lt;strong&gt;Comment your code!&lt;/strong&gt; What did you do? Where did you get stuck? How did you fix it?&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Lab 1‚É£</title>
   <link href="http://bsk.education/CS9/2016/09/13/lab-1/"/>
   <updated>2016-09-13T20:51:00-04:00</updated>
   <id>http://bsk.education/CS9/2016/09/13/lab-1‚É£</id>
   <content type="html">&lt;h2 id=&quot;learning-targets&quot;&gt;üéØ Learning Targets&lt;/h2&gt;
&lt;p&gt;I can explain in writing the expected outcome of a piece of code.   &lt;br /&gt;
I can complete a CS lab to specification.&lt;/p&gt;

&lt;h2 id=&quot;do-now&quot;&gt;üëâ Do Now&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Login to Classroom and open Lab 1.0.&lt;/li&gt;
  &lt;li&gt;Complete the &lt;strong&gt;Do Now&lt;/strong&gt; portion of the lab.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;lab-days&quot;&gt;Lab Days&lt;/h2&gt;

&lt;p&gt;This is our first Lab Day. You will be working at your own pace on a series of programming challenges and projects. You are welcome to consult teachers or classmates for help or hints (and you are more than welcome to help others), but your work must be your own, and you must be able to explain it.&lt;/p&gt;

&lt;p&gt;The expectation for Lab Days is that you are documenting your work in your code, giving credit to classmates or any other sources of assistance and inspiration.&lt;/p&gt;

&lt;p&gt;Good luck, and have fun!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Day 0‚É£</title>
   <link href="http://bsk.education/CS9/2016/09/08/day-1/"/>
   <updated>2016-09-08T22:19:56-04:00</updated>
   <id>http://bsk.education/CS9/2016/09/08/day-1</id>
   <content type="html">&lt;h2 id=&quot;learning-target&quot;&gt;üéØ Learning Target&lt;/h2&gt;
&lt;p&gt;I can create a SNAP login and write functional code in SNAP.
I can define &lt;em&gt;algorithm&lt;/em&gt; and give examples.&lt;/p&gt;

&lt;h2 id=&quot;do-now&quot;&gt;üëâ Do Now&lt;/h2&gt;
&lt;p&gt;Join Google Classroom code &lt;code class=&quot;highlighter-rouge&quot;&gt;6tneev&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In Google Classroom:&lt;/strong&gt; What is an algorithm?&lt;/p&gt;

&lt;h2 id=&quot;notes&quot;&gt;Notes&lt;/h2&gt;
&lt;p&gt;Computers follow a set of instructions called a &lt;strong&gt;__&lt;/strong&gt;_____.&lt;/p&gt;

&lt;p&gt;Programs are written in &lt;strong&gt;__&lt;/strong&gt;&lt;em&gt;__&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;There are different programming &lt;strong&gt;__&lt;/strong&gt;&lt;em&gt;__&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;We will be learning one called &lt;strong&gt;__&lt;/strong&gt;&lt;em&gt;__&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;What are you better at than a computer? What is a computer better at?&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Markup&lt;/th&gt;
      &lt;th&gt;Programming&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Using syntax to  displaying information  &lt;code class=&quot;highlighter-rouge&quot;&gt;HTML&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Giving instructions given to a computer. &lt;code class=&quot;highlighter-rouge&quot;&gt;p5, Python&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Descriptive&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Procedural&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;‚ÄúThe car has four doors!‚Äù&lt;/td&gt;
      &lt;td&gt;‚ÄúOpen the car doors!‚Äù&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Algorithms are &lt;strong&gt;procedural&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;lab-time&quot;&gt;Lab Time&lt;/h2&gt;
&lt;p&gt;Login to Google Classroom and complete ‚ÄúGetting set up in SNAP.‚Äù&lt;/p&gt;

&lt;p&gt;Good luck have fun goodbye don‚Äôt bother me‚Ä¶ üéâ&lt;/p&gt;

&lt;h2 id=&quot;debrief&quot;&gt;Debrief&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;What was challenging?&lt;/li&gt;
  &lt;li&gt;What was similar to programming you‚Äôve done before? What was different?&lt;/li&gt;
  &lt;li&gt;Why can‚Äôt we just program in English?&lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>üéâHello World</title>
   <link href="http://bsk.education/CS9/2016/09/08/hello-world/"/>
   <updated>2016-09-08T00:00:00-04:00</updated>
   <id>http://bsk.education/CS9/2016/09/08/hello-world</id>
   <content type="html">&lt;p&gt;üéØ &lt;strong&gt;Learning Target:&lt;/strong&gt; I can describe the role of creativity in Computer Science.&lt;/p&gt;

&lt;p&gt;üëâ &lt;strong&gt;Do Now:&lt;/strong&gt; Why does the new iPhone 7 &lt;strong&gt;not&lt;/strong&gt; have a headphone jack?&lt;/p&gt;

&lt;p&gt;Welcome to the first day of Computer Science.&lt;/p&gt;

&lt;p&gt;This semester, we‚Äôre going to focus on the &lt;strong&gt;fundamentals&lt;/strong&gt;. Today, we‚Äôre going to focus on &lt;strong&gt;creativity&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Before you create with a computer (and you will be, don‚Äôt worry), you‚Äôre going to create with paper.&lt;/p&gt;

&lt;h2 id=&quot;draw-1&quot;&gt;Draw 1&lt;/h2&gt;

&lt;p&gt;How good are you at giving direction?&lt;/p&gt;

&lt;h2 id=&quot;draw-2&quot;&gt;Draw 2&lt;/h2&gt;

&lt;p&gt;How does collaboration impact creativity?&lt;/p&gt;

&lt;h2 id=&quot;draw-3&quot;&gt;Draw 3&lt;/h2&gt;

&lt;p&gt;How creative can you be on a computer?&lt;/p&gt;
</content>
 </entry>
 

</feed>
